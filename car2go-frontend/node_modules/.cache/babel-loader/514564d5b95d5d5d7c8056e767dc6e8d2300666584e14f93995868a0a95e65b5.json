{"ast":null,"code":"const crypto = require('crypto');\n\n// The salt value to use\nconst salt = 'a_random_salt_value';\n\n/**\n * Salts a value by concatenating it with the salt value\n * and then hashing it with SHA256.\n *\n * @param {string} value - The value to salt.\n * @returns {string} The salted and hashed value.\n */\nfunction saltValue(value) {\n  const valueToHash = salt + value;\n  const hash = crypto.createHash('sha256');\n  hash.update(valueToHash);\n  return hash.digest('hex');\n}\n\n/**\n * Desalts a value by hashing the salt and the original value,\n * and then comparing the result with the hashed value.\n * If they match, returns the original value.\n *\n * @param {string} hashedValue - The hashed value to desalt.\n * @returns {string|null} The original value, or null if the hashed value is incorrect.\n */\nfunction desaltValue(hashedValue) {\n  const valueToCheck = salt + hashedValue.substring(salt.length);\n  const hash = crypto.createHash('sha256');\n  hash.update(valueToCheck);\n  const hashedValueToCheck = hash.digest('hex');\n  if (hashedValueToCheck === hashedValue) {\n    return valueToCheck.substring(salt.length);\n  } else {\n    return null;\n  }\n}","map":{"version":3,"names":["crypto","require","salt","saltValue","value","valueToHash","hash","createHash","update","digest","desaltValue","hashedValue","valueToCheck","substring","length","hashedValueToCheck"],"sources":["/var/www/html/Car2Go/car2go-frontend/src/salting.js"],"sourcesContent":["const crypto = require('crypto');\n\n// The salt value to use\nconst salt = 'a_random_salt_value';\n\n/**\n * Salts a value by concatenating it with the salt value\n * and then hashing it with SHA256.\n *\n * @param {string} value - The value to salt.\n * @returns {string} The salted and hashed value.\n */\nfunction saltValue(value) {\n  const valueToHash = salt + value;\n  const hash = crypto.createHash('sha256');\n  hash.update(valueToHash);\n  return hash.digest('hex');\n}\n\n/**\n * Desalts a value by hashing the salt and the original value,\n * and then comparing the result with the hashed value.\n * If they match, returns the original value.\n *\n * @param {string} hashedValue - The hashed value to desalt.\n * @returns {string|null} The original value, or null if the hashed value is incorrect.\n */\nfunction desaltValue(hashedValue) {\n  const valueToCheck = salt + hashedValue.substring(salt.length);\n  const hash = crypto.createHash('sha256');\n  hash.update(valueToCheck);\n  const hashedValueToCheck = hash.digest('hex');\n\n  if (hashedValueToCheck === hashedValue) {\n    return valueToCheck.substring(salt.length);\n  } else {\n    return null;\n  }\n}\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;;AAEhC;AACA,MAAMC,IAAI,GAAG,qBAAqB;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAACC,KAAK,EAAE;EACxB,MAAMC,WAAW,GAAGH,IAAI,GAAGE,KAAK;EAChC,MAAME,IAAI,GAAGN,MAAM,CAACO,UAAU,CAAC,QAAQ,CAAC;EACxCD,IAAI,CAACE,MAAM,CAACH,WAAW,CAAC;EACxB,OAAOC,IAAI,CAACG,MAAM,CAAC,KAAK,CAAC;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAACC,WAAW,EAAE;EAChC,MAAMC,YAAY,GAAGV,IAAI,GAAGS,WAAW,CAACE,SAAS,CAACX,IAAI,CAACY,MAAM,CAAC;EAC9D,MAAMR,IAAI,GAAGN,MAAM,CAACO,UAAU,CAAC,QAAQ,CAAC;EACxCD,IAAI,CAACE,MAAM,CAACI,YAAY,CAAC;EACzB,MAAMG,kBAAkB,GAAGT,IAAI,CAACG,MAAM,CAAC,KAAK,CAAC;EAE7C,IAAIM,kBAAkB,KAAKJ,WAAW,EAAE;IACtC,OAAOC,YAAY,CAACC,SAAS,CAACX,IAAI,CAACY,MAAM,CAAC;EAC5C,CAAC,MAAM;IACL,OAAO,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}