{"ast":null,"code":"import CryptoJS from 'crypto-js';\n\n// Define the salt value as a constant\nconst salt = 'a_random_salt_value';\n\n/**\n * Salts a value by concatenating it with the salt value\n * and then hashing it with SHA256.\n *\n * @param {string} value - The value to salt.\n * @returns {string} The salted and hashed value.\n */\nexport function saltValue(value) {\n  const valueToHash = salt + value;\n  return CryptoJS.SHA256(valueToHash).toString();\n}\n\n/**\n * Desalts a value by hashing the salt and the original value,\n * and then comparing the result with the hashed value.\n * If they match, returns the original value.\n *\n * @param {string} hashedValue - The hashed value to desalt.\n * @returns {string|null} The original value, or null if the hashed value is incorrect.\n */\nexport function desaltValue(hashedValue) {\n  if (typeof hashedValue !== 'string' || hashedValue.length < salt.length) {\n    return null;\n  }\n  const valueToCheck = hashedValue.substring(salt.length);\n  const hashedValueToCheck = CryptoJS.SHA256(salt + valueToCheck).toString();\n  if (hashedValueToCheck === hashedValue) {\n    return valueToCheck;\n  } else {\n    return null;\n  }\n}","map":{"version":3,"names":["CryptoJS","salt","saltValue","value","valueToHash","SHA256","toString","desaltValue","hashedValue","length","valueToCheck","substring","hashedValueToCheck"],"sources":["/var/www/html/Car2Go/car2go-frontend/src/salting.js"],"sourcesContent":["import CryptoJS from 'crypto-js';\n\n// Define the salt value as a constant\nconst salt = 'a_random_salt_value';\n\n/**\n * Salts a value by concatenating it with the salt value\n * and then hashing it with SHA256.\n *\n * @param {string} value - The value to salt.\n * @returns {string} The salted and hashed value.\n */\nexport function saltValue(value) {\n  const valueToHash = salt + value;\n  return CryptoJS.SHA256(valueToHash).toString();\n}\n\n/**\n * Desalts a value by hashing the salt and the original value,\n * and then comparing the result with the hashed value.\n * If they match, returns the original value.\n *\n * @param {string} hashedValue - The hashed value to desalt.\n * @returns {string|null} The original value, or null if the hashed value is incorrect.\n */\nexport function desaltValue(hashedValue) {\n    if (typeof hashedValue !== 'string' || hashedValue.length < salt.length) {\n      return null;\n    }\n  \n    const valueToCheck = hashedValue.substring(salt.length);\n    const hashedValueToCheck = CryptoJS.SHA256(salt + valueToCheck).toString();\n  \n    if (hashedValueToCheck === hashedValue) {\n      return valueToCheck;\n    } else {\n      return null;\n    }\n  }\n  "],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;;AAEhC;AACA,MAAMC,IAAI,GAAG,qBAAqB;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,KAAK,EAAE;EAC/B,MAAMC,WAAW,GAAGH,IAAI,GAAGE,KAAK;EAChC,OAAOH,QAAQ,CAACK,MAAM,CAACD,WAAW,CAAC,CAACE,QAAQ,EAAE;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,WAAW,EAAE;EACrC,IAAI,OAAOA,WAAW,KAAK,QAAQ,IAAIA,WAAW,CAACC,MAAM,GAAGR,IAAI,CAACQ,MAAM,EAAE;IACvE,OAAO,IAAI;EACb;EAEA,MAAMC,YAAY,GAAGF,WAAW,CAACG,SAAS,CAACV,IAAI,CAACQ,MAAM,CAAC;EACvD,MAAMG,kBAAkB,GAAGZ,QAAQ,CAACK,MAAM,CAACJ,IAAI,GAAGS,YAAY,CAAC,CAACJ,QAAQ,EAAE;EAE1E,IAAIM,kBAAkB,KAAKJ,WAAW,EAAE;IACtC,OAAOE,YAAY;EACrB,CAAC,MAAM;IACL,OAAO,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}