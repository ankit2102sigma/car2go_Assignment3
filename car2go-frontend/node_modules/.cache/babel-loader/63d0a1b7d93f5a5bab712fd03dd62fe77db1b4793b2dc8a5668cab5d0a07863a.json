{"ast":null,"code":"import CryptoJS from 'crypto-js';\n\n// The salt value to use\nconst salt = 'a_random_salt_value';\n\n/**\n * Salts a value by concatenating it with the salt value\n * and then hashing it with SHA256.\n *\n * @param {string} value - The value to salt.\n * @returns {string} The salted and hashed value.\n */\nexport function saltValue(value) {\n  const valueToHash = salt + value;\n  return CryptoJS.SHA256(valueToHash).toString();\n}\n\n/**\n * Desalts a value by removing the salt value from the hashed value\n * and returning the original value.\n *\n * @param {string} hashedValue - The hashed value to desalt.\n * @returns {string} The original value.\n */\nexport function desaltValue(hashedValue) {\n  console.log('salt:', salt);\n  console.log('hashedValue:', hashedValue);\n  const saltLength = salt.length;\n  const valueWithoutSalt = hashedValue.substring(saltLength);\n  return valueWithoutSalt;\n}","map":{"version":3,"names":["CryptoJS","salt","saltValue","value","valueToHash","SHA256","toString","desaltValue","hashedValue","console","log","saltLength","length","valueWithoutSalt","substring"],"sources":["/var/www/html/Car2Go/car2go-frontend/src/salting.js"],"sourcesContent":["import CryptoJS from 'crypto-js';\n\n// The salt value to use\nconst salt = 'a_random_salt_value';\n\n/**\n * Salts a value by concatenating it with the salt value\n * and then hashing it with SHA256.\n *\n * @param {string} value - The value to salt.\n * @returns {string} The salted and hashed value.\n */\nexport function saltValue(value) {\n  const valueToHash = salt + value;\n  return CryptoJS.SHA256(valueToHash).toString();\n}\n\n/**\n * Desalts a value by removing the salt value from the hashed value\n * and returning the original value.\n *\n * @param {string} hashedValue - The hashed value to desalt.\n * @returns {string} The original value.\n */\nexport function desaltValue(hashedValue) {\n    console.log('salt:', salt);\n    console.log('hashedValue:', hashedValue);\n    const saltLength = salt.length;\n    const valueWithoutSalt = hashedValue.substring(saltLength);\n    return valueWithoutSalt;\n  }\n  \n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;;AAEhC;AACA,MAAMC,IAAI,GAAG,qBAAqB;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,KAAK,EAAE;EAC/B,MAAMC,WAAW,GAAGH,IAAI,GAAGE,KAAK;EAChC,OAAOH,QAAQ,CAACK,MAAM,CAACD,WAAW,CAAC,CAACE,QAAQ,EAAE;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,WAAW,EAAE;EACrCC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAET,IAAI,CAAC;EAC1BQ,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,WAAW,CAAC;EACxC,MAAMG,UAAU,GAAGV,IAAI,CAACW,MAAM;EAC9B,MAAMC,gBAAgB,GAAGL,WAAW,CAACM,SAAS,CAACH,UAAU,CAAC;EAC1D,OAAOE,gBAAgB;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}