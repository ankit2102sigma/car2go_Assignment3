{"ast":null,"code":"import CryptoJS from 'crypto-js';\n\n// Generate a random salt value\nconst salt = CryptoJS.lib.WordArray.random(16).toString();\n\n/**\n * Salts a value by concatenating it with the salt value\n * and then hashing it with a strong hash function.\n *\n * @param {string} value - The value to salt.\n * @returns {string} The salted and hashed value.\n */\nexport function saltValue(value) {\n  const valueToHash = salt + value;\n  return CryptoJS.SHA3(valueToHash).toString();\n}\n\n/**\n * Desalts a value by hashing the salt and the original value,\n * and then comparing the result with the hashed value.\n * If they match, returns the original value.\n *\n * @param {string} hashedValue - The hashed value to desalt.\n * @returns {string|null} The original value, or null if the hashed value is incorrect.\n */\nexport function desaltValue(hashedValue) {\n  const hashedValueToCheck = saltValue(desaltValue);\n  if (hashedValueToCheck === hashedValue) {\n    const valueWithoutSalt = hashedValue.substring(saltValue.length);\n    return valueWithoutSalt;\n  } else {\n    return null;\n  }\n}","map":{"version":3,"names":["CryptoJS","salt","lib","WordArray","random","toString","saltValue","value","valueToHash","SHA3","desaltValue","hashedValue","hashedValueToCheck","valueWithoutSalt","substring","length"],"sources":["/var/www/html/Car2Go/car2go-frontend/src/salting.js"],"sourcesContent":["import CryptoJS from 'crypto-js';\n\n// Generate a random salt value\nconst salt = CryptoJS.lib.WordArray.random(16).toString();\n\n/**\n * Salts a value by concatenating it with the salt value\n * and then hashing it with a strong hash function.\n *\n * @param {string} value - The value to salt.\n * @returns {string} The salted and hashed value.\n */\nexport function saltValue(value) {\n  const valueToHash = salt + value;\n  return CryptoJS.SHA3(valueToHash).toString();\n}\n\n/**\n * Desalts a value by hashing the salt and the original value,\n * and then comparing the result with the hashed value.\n * If they match, returns the original value.\n *\n * @param {string} hashedValue - The hashed value to desalt.\n * @returns {string|null} The original value, or null if the hashed value is incorrect.\n */\nexport function desaltValue(hashedValue) {\n    const hashedValueToCheck = saltValue(desaltValue);\n    if (hashedValueToCheck === hashedValue) {\n      const valueWithoutSalt = hashedValue.substring(saltValue.length);\n      return valueWithoutSalt;\n    } else {\n      return null;\n    }\n  }\n  \n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;;AAEhC;AACA,MAAMC,IAAI,GAAGD,QAAQ,CAACE,GAAG,CAACC,SAAS,CAACC,MAAM,CAAC,EAAE,CAAC,CAACC,QAAQ,EAAE;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,KAAK,EAAE;EAC/B,MAAMC,WAAW,GAAGP,IAAI,GAAGM,KAAK;EAChC,OAAOP,QAAQ,CAACS,IAAI,CAACD,WAAW,CAAC,CAACH,QAAQ,EAAE;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,WAAWA,CAACC,WAAW,EAAE;EACrC,MAAMC,kBAAkB,GAAGN,SAAS,CAACI,WAAW,CAAC;EACjD,IAAIE,kBAAkB,KAAKD,WAAW,EAAE;IACtC,MAAME,gBAAgB,GAAGF,WAAW,CAACG,SAAS,CAACR,SAAS,CAACS,MAAM,CAAC;IAChE,OAAOF,gBAAgB;EACzB,CAAC,MAAM;IACL,OAAO,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}