{"ast":null,"code":"import CryptoJS from 'crypto-js';\n\n// Generate a random salt using CryptoJS\nconst salt = CryptoJS.lib.WordArray.random(32).toString();\n\n/**\n * Salts a value by concatenating it with the salt value\n * and then hashing it with SHA256.\n *\n * @param {string} value - The value to salt.\n * @returns {string} The salted and hashed value.\n */\nexport function saltValue(value) {\n  const valueToHash = salt + value;\n  return CryptoJS.SHA256(valueToHash).toString();\n}\n\n/**\n * Desalts a value by hashing the salt and the original value,\n * and then comparing the result with the hashed value.\n * If they match, returns the original value.\n *\n * @param {string} hashedValue - The hashed value to desalt.\n * @returns {string|null} The original value, or null if the hashed value is incorrect.\n */\nexport function desaltValue(hashedValue) {\n  const valueToCheck = hashedValue.substring(salt.length);\n  const hashedValueToCheck = CryptoJS.SHA256(salt + valueToCheck).toString();\n  if (hashedValueToCheck === hashedValue) {\n    return valueToCheck;\n  } else {\n    return null;\n  }\n}","map":{"version":3,"names":["CryptoJS","salt","lib","WordArray","random","toString","saltValue","value","valueToHash","SHA256","desaltValue","hashedValue","valueToCheck","substring","length","hashedValueToCheck"],"sources":["/var/www/html/Car2Go/car2go-frontend/src/salting.js"],"sourcesContent":["import CryptoJS from 'crypto-js'\n\n// Generate a random salt using CryptoJS\nconst salt = CryptoJS.lib.WordArray.random(32).toString()\n\n/**\n * Salts a value by concatenating it with the salt value\n * and then hashing it with SHA256.\n *\n * @param {string} value - The value to salt.\n * @returns {string} The salted and hashed value.\n */\nexport function saltValue (value) {\n  const valueToHash = salt + value\n  return CryptoJS.SHA256(valueToHash).toString()\n}\n\n/**\n * Desalts a value by hashing the salt and the original value,\n * and then comparing the result with the hashed value.\n * If they match, returns the original value.\n *\n * @param {string} hashedValue - The hashed value to desalt.\n * @returns {string|null} The original value, or null if the hashed value is incorrect.\n */\nexport function desaltValue (hashedValue) {\n  const valueToCheck = hashedValue.substring(salt.length)\n  const hashedValueToCheck = CryptoJS.SHA256(salt + valueToCheck).toString()\n\n  if (hashedValueToCheck === hashedValue) {\n    return valueToCheck\n  } else {\n    return null\n  }\n}\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;;AAEhC;AACA,MAAMC,IAAI,GAAGD,QAAQ,CAACE,GAAG,CAACC,SAAS,CAACC,MAAM,CAAC,EAAE,CAAC,CAACC,QAAQ,EAAE;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAAEC,KAAK,EAAE;EAChC,MAAMC,WAAW,GAAGP,IAAI,GAAGM,KAAK;EAChC,OAAOP,QAAQ,CAACS,MAAM,CAACD,WAAW,CAAC,CAACH,QAAQ,EAAE;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,WAAWA,CAAEC,WAAW,EAAE;EACxC,MAAMC,YAAY,GAAGD,WAAW,CAACE,SAAS,CAACZ,IAAI,CAACa,MAAM,CAAC;EACvD,MAAMC,kBAAkB,GAAGf,QAAQ,CAACS,MAAM,CAACR,IAAI,GAAGW,YAAY,CAAC,CAACP,QAAQ,EAAE;EAE1E,IAAIU,kBAAkB,KAAKJ,WAAW,EAAE;IACtC,OAAOC,YAAY;EACrB,CAAC,MAAM;IACL,OAAO,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}